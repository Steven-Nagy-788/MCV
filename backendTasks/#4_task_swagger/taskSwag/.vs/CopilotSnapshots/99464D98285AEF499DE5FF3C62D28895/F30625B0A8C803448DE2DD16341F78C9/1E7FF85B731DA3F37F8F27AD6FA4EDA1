using Microsoft.AspNetCore.Mvc;
using taskSwag.Models;
using Microsoft.EntityFrameworkCore;

namespace taskSwag.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class UserController : ControllerBase
    {
        private readonly UserDbContext _context;

        public UserController(UserDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async ValueTask<IResult> GetUsers()
        {
            return Results.Ok(await _context.Users.ToListAsync());
        }

        [HttpGet("{id}")]
        public async ValueTask<IResult> GetUserById(int id)
        {
            var user = await _context.Users.FindAsync(id);
            return user is not null ? Results.Ok(user) : Results.NotFound();
        }

        [HttpPost]
        public async ValueTask<IResult> CreateUser(UserDto userDto)
        {
            var user = new User
            {
                Name = userDto.Name,
                Phone = userDto.Phone
            };
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            return Results.Created($"/User/{user.Id}", user);
        }

        //[HttpPut("{id}")]
        //public async Task<IActionResult> UpdateUser(int id, User user)
        //{
        //    if (id != user.Id) return BadRequest();
        //    _context.Entry(user).State = EntityState.Modified;
        //    try
        //    {
        //        await _context.SaveChangesAsync();
        //    }
        //    catch (DbUpdateConcurrencyException)
        //    {
        //        if (!_context.Users.Any(e => e.Id == id))
        //            return NotFound();
        //        else
        //            throw;
        //    }
        //    return NoContent();
        //}

        [HttpDelete("{id}")]
        public async ValueTask<IResult> DeleteUser(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user is null) return Results.NotFound();
            _context.Users.Remove(user);
            await _context.SaveChangesAsync();
            return Results.NoContent();
        }
    }
}
