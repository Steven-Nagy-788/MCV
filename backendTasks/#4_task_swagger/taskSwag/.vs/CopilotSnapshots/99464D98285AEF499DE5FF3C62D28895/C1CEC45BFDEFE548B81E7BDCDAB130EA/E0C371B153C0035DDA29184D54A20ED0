using Microsoft.AspNetCore.Mvc;
using taskSwag.Models;
using Microsoft.EntityFrameworkCore;

namespace taskSwag.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class LocationController : ControllerBase
    {
        private readonly Models.DbContext _context;

        public LocationController(Models.DbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async ValueTask<IResult> GetLocations()
        {
            return Results.Ok(await _context.Locations.Include(l => l.Users).ToListAsync());
        }

        [HttpGet("{id}")]
        public async ValueTask<IResult> GetLocationById(int id)
        {
            var location = await GetLocationEntityAsync(id);
            return location is not null ? Results.Ok(location) : Results.NotFound();
        }

        private async ValueTask<Location?> GetLocationEntityAsync(int id)
        {
            return await _context.Locations.Include(l => l.Users).FirstOrDefaultAsync(l => l.Id == id);
        }

        [HttpPost]
        public async ValueTask<IResult> CreateLocation(LocationDto locationDto)
        {
            var location = new Location
            {
                City = locationDto.City,
                Countery = locationDto.Countery
            };
            _context.Locations.Add(location);
            await _context.SaveChangesAsync();
            return Results.Created($"/Location/{location.Id}", location);
        }

        [HttpPut("{id}")]
        public async ValueTask<IResult> UpdateLocation(int id, LocationDto locationDto)
        {
            var existingLocation = await GetLocationEntityAsync(id);
            if (existingLocation is null) return Results.NotFound();
            
            existingLocation.City = locationDto.City;
            existingLocation.Countery = locationDto.Countery;
            
            _context.Entry(existingLocation).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            
            var updatedLocation = await GetLocationEntityAsync(id);
            return updatedLocation is not null ? Results.Ok(updatedLocation) : Results.NoContent();
        }

        [HttpDelete("{id}")]
        public async ValueTask<IResult> DeleteLocation(int id)
        {
            var location = await GetLocationEntityAsync(id);
            if (location is null) return Results.NotFound();
            _context.Locations.Remove(location);
            await _context.SaveChangesAsync();
            return Results.NoContent();
        }

        [HttpGet("{id}/users")]
        public async ValueTask<IResult> GetLocationUsers(int id)
        {
            var location = await GetLocationEntityAsync(id);
            if (location is null) return Results.NotFound();
            return Results.Ok(location.Users);
        }
    }
}